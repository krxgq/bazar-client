{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bodnarchuk Bohdan\\\\Desktop\\\\bazar_remake\\\\frontend\\\\src\\\\Favourites.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FavCard from \"./components/FavCard.jsx\";\nimport { getCurrentUser } from \"./app.js\";\nimport Header from \"./components/Header.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require(\"./configs/config.js\");\nconst Favourites = () => {\n  _s();\n  const [favs, setFavs] = useState([]);\n  const [userID, setUserID] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchFavs = async () => {\n      try {\n        const user = await getCurrentUser();\n        setUserID(user.id);\n        const response = await fetch(`http://${config.host}:3001/api/getAllFavorites`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: user.id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Error fetching favourite items: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const favsData = await Promise.all(data.map(async fav => {\n          try {\n            const itemResponse = await fetch(`http://${config.host}:3001/api/getItem?id=${fav.ItemID}`, {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            if (!itemResponse.ok) {\n              console.warn(`Network response was not ok for item ${fav.ItemID}`);\n              return null; // Return null for items that are not found\n            }\n            return await itemResponse.json();\n          } catch (error) {\n            console.error(`Error fetching item ${fav.ItemID}: `, error);\n            return null; // Return null in case of fetch error\n          }\n        }));\n        setFavs(favsData.filter(fav => fav !== null)); // Filter out null items\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching favourite items: \", error);\n        setLoading(false);\n      }\n    };\n    fetchFavs();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), favs.map(fav => /*#__PURE__*/_jsxDEV(FavCard, {\n      id: fav.id,\n      name: fav.title,\n      img: fav.img,\n      price: fav.price\n    }, fav.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Favourites, \"XehqRuOVhr7k5bc+J095CbsjFUE=\");\n_c = Favourites;\nexport default Favourites;\nvar _c;\n$RefreshReg$(_c, \"Favourites\");","map":{"version":3,"names":["React","useState","useEffect","FavCard","getCurrentUser","Header","jsxDEV","_jsxDEV","config","require","Favourites","_s","favs","setFavs","userID","setUserID","loading","setLoading","fetchFavs","user","id","response","fetch","host","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","favsData","Promise","all","map","fav","itemResponse","ItemID","console","warn","error","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","StrictMode","name","title","img","price","_c","$RefreshReg$"],"sources":["C:/Users/Bodnarchuk Bohdan/Desktop/bazar_remake/frontend/src/Favourites.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport FavCard from \"./components/FavCard.jsx\";\r\nimport { getCurrentUser } from \"./app.js\";\r\nimport Header from \"./components/Header.jsx\";\r\nconst config = require(\"./configs/config.js\");\r\n\r\nconst Favourites = () => {\r\n  const [favs, setFavs] = useState([]);\r\n  const [userID, setUserID] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchFavs = async () => {\r\n      try {\r\n        const user = await getCurrentUser();\r\n        setUserID(user.id);\r\n\r\n        const response = await fetch(\r\n          `http://${config.host}:3001/api/getAllFavorites`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ id: user.id }),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `Error fetching favourite items: ${response.statusText}`\r\n          );\r\n        }\r\n\r\n        const data = await response.json();\r\n        const favsData = await Promise.all(\r\n          data.map(async (fav) => {\r\n            try {\r\n              const itemResponse = await fetch(\r\n                `http://${config.host}:3001/api/getItem?id=${fav.ItemID}`,\r\n                {\r\n                  method: \"GET\",\r\n                  headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                }\r\n              );\r\n\r\n              if (!itemResponse.ok) {\r\n                console.warn(\r\n                  `Network response was not ok for item ${fav.ItemID}`\r\n                );\r\n                return null; // Return null for items that are not found\r\n              }\r\n\r\n              return await itemResponse.json();\r\n            } catch (error) {\r\n              console.error(`Error fetching item ${fav.ItemID}: `, error);\r\n              return null; // Return null in case of fetch error\r\n            }\r\n          })\r\n        );\r\n\r\n        setFavs(favsData.filter((fav) => fav !== null)); // Filter out null items\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching favourite items: \", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFavs();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <React.StrictMode>\r\n      <Header />\r\n      {favs.map((fav) => (\r\n        <FavCard\r\n          key={fav.id}\r\n          id={fav.id}\r\n          name={fav.title}\r\n          img={fav.img}\r\n          price={fav.price}\r\n        />\r\n      ))}\r\n    </React.StrictMode>\r\n  );\r\n};\r\n\r\nexport default Favourites;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}